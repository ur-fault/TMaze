name: release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Release version"
        required: true
      dry-run:
        type: choice
        description: "Dry Run"
        options:
          - "no"
          - "yes"
        required: true

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Inputs from workflow dispatch
        shell: bash
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "DRY_RUN=${{ github.event.inputs.dry-run }}" >> $GITHUB_ENV
          echo "VERSION: ${{ github.event.inputs.version }}"

      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" tmaze/Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi

      - name: Create GitHub release
        if: env.DRY_RUN != 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}
      dry_run: ${{ env.DRY_RUN }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, macos, macos-arm, win-msvc, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          name: linux-x86_64
          strip: x86_64-linux-gnu-strip
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          name: linux-aarch64
          strip: aarch64-linux-gnu-strip
        - build: macos
          os: macos-12
          rust: stable
          target: x86_64-apple-darwin
          name: macos-x86_64
        - build: macos-arm
          os: macos-12
          rust: stable
          target: aarch64-apple-darwin
          name: macos-aarch64
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          name: windows-x86_64
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc
          name: windows-x86

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore target cache
      uses: actions/cache@v4
      with:
        path: target
        key: bin-${{ matrix.target }}--cargo-${{ hashFiles('**/Cargo.lock') }}
        save-always: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.os == 'ubuntu-latest' && matrix.target != ''
      shell: bash
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set target variables
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      shell: bash
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      shell: bash
      run: |
        ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/tmaze.exe"
        else
          bin="target/${{ matrix.target }}/release/tmaze"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN"

    - name: Strip release binary (cross)
      if: env.CARGO == 'cross'
      shell: bash
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          "ghcr.io/cross-rs/${{ matrix.target }}:main" \
          "${{ matrix.strip }}" \
          "/$BIN"

    - name: Rename binary according to target
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          NEW_BIN="${{ env.TARGET_DIR }}/tmaze_${{ matrix.name }}_${{ needs.create-release.outputs.version }}.exe"
        else
          NEW_BIN="${{ env.TARGET_DIR }}/tmaze_${{ matrix.name }}_${{ needs.create-release.outputs.version }}"
        fi
        echo "NEW_BIN=$NEW_BIN" >> $GITHUB_ENV
        cp "$BIN" "$NEW_BIN"

    - name: Upload release archive
      if: ${{ needs.create-release.outputs.dry_run != 'yes' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" ${{ env.NEW_BIN }}

  build-release-deb:
    name: build-release-deb
    needs: ['create-release']
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu
      TARGET_NAME: x64_64
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore target cache
      uses: actions/cache@v4
      with:
        path: target
        key: deb-${{ runner.os }}--cargo-${{ hashFiles('**/Cargo.lock') }}
        save-always: true

    - name: Install packages (Ubuntu)
      shell: bash
      run: |
        sudo apt update && sudo apt install libasound2-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        target: ${{ env.TARGET }}

    - name: Install cargo-deb
      shell: bash
      run: |
        cargo install cargo-deb

    - name: Create deployment directory
      shell: bash
      run: |
        dir=deployment/deb
        mkdir -p "$dir"
        echo "DEPLOY_DIR=$dir" >> $GITHUB_ENV

    - name: Build release binary
      shell: bash
      run: |
        cargo deb -p tmaze --profile release --target ${{ env.TARGET }}
        version="${{ needs.create-release.outputs.version }}"
        echo "DEB_DIR=target/${{ env.TARGET }}/debian" >> $GITHUB_ENV
        echo "DEB_BUILD_NAME=tmaze_$version-1_amd64.deb" >> $GITHUB_ENV

    - name: Rename deb
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        DEB_NAME="tmaze_${{ env.TARGET_NAME }}_$version".deb
        echo "DEB_NAME=$DEB_NAME" >> $GITHUB_ENV
        mv $DEB_DIR/$DEB_BUILD_NAME $DEB_NAME

    - name: Upload release archive
      if: ${{ needs.create-release.outputs.dry_run != 'yes' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" "$DEB_NAME"

  publish-on-crates-io:
    runs-on: ubuntu-latest
    needs: ['create-release']
    steps:
      - uses: actions/checkout@v4

      - name: Restore target cache
        uses: actions/cache@v4
        with:
          path: target
          key: cratesio-${{ runner.os }}--cargo-${{ hashFiles('**/Cargo.lock') }}
          save-always: true

      - name: Install 
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable

      - run: sudo apt update && sudo apt install libasound2-dev

      - name: publish cmaze
        if: ${{ needs.create-release.outputs.dry_run != 'yes' }}
        uses: katyo/publish-crates@v2
        with:
            path: ./cmaze
            registry-token: ${{ secrets.CRATES_IO }}
            ignore-unpublished-changes: true

      - name: publish tmaze
        if: ${{ needs.create-release.outputs.dry_run != 'yes' }}
        uses: katyo/publish-crates@v2
        with:
            path: ./tmaze
            registry-token: ${{ secrets.CRATES_IO }}
            ignore-unpublished-changes: true
